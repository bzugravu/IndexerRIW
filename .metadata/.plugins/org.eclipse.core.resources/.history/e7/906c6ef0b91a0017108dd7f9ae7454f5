package HtmlParserApp;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jsoup.nodes.Document;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Helper {
	
	public List<String> stopWords = new ArrayList<>();
	
	public List<String> exceptionWords = new ArrayList<>();
	
	public Map<String, Integer> myDictionary = new HashMap<String, Integer>();
	
	public Map<String, List<MapHelper>> myInvertedIndexMap = new HashMap<String, List<MapHelper>>();
	
	public Porter porter;
	
	public Helper(Porter p){
		this.porter = p;
	}
	
	public void SetStopWordsList(){
		try {
			File file = new File("stopWords.txt");
			FileReader fileReader = new FileReader(file);
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			String line;
			while ((line = bufferedReader.readLine()) != null) {
				stopWords.add(line);
			}
			fileReader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void SetExceptionWordsList(){
		try {
			File file = new File("exceptionWords.txt");
			FileReader fileReader = new FileReader(file);
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			String line;
			while ((line = bufferedReader.readLine()) != null) {
				exceptionWords.add(line);
			}
			fileReader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void ParseDocument(File input) throws IOException{
		HtmlParser htmlParser = new HtmlParser();
		Document doc = htmlParser.ReadHtmlFile(input);
		String title = htmlParser.GetTitle(doc);
		String text = htmlParser.GetText(doc);
		List<String> keywordsAttContent = htmlParser.GetAttributeContent(doc, "meta", "keywords");
		List<String> descriptionAttContent = htmlParser.GetAttributeContent(doc, "meta", "description");
		List<String> robotsAttContent = htmlParser.GetAttributeContent(doc, "meta", "robots");
		List<String> anchorLinks = htmlParser.GetAnchors(doc);
		
		System.out.println("Title:" + title);
		System.out.println("Keywords:" + keywordsAttContent.toString());
		System.out.println("Description:" + descriptionAttContent);
		System.out.println("Robots:" + robotsAttContent);
		System.out.println("Links:" + anchorLinks);
		System.out.println("Text:" + text);
	}
	
	public void PopulateDictionary(File input) throws IOException{
		myDictionary.clear();
		HtmlParser htmlParser = new HtmlParser();
		Document doc = htmlParser.ReadHtmlFile(input);
		String text = htmlParser.GetText(doc);
		StringBuilder word = new StringBuilder();
		for(char c : text.toCharArray()){
			if(Character.isLetter(c)){
				word.append(c);
			}
			else{
				if(!word.toString().isEmpty()){
					/*if(exceptionWords.contains(word))
					//TODO
					 */
					//word = word.toLowerCase();
					if(stopWords.contains(word.toString().toLowerCase()))
						continue;		
					
					String normalFormWord = porter.NormalForm(word.toString().toLowerCase());
					if(myDictionary.containsKey(normalFormWord)){
						//String normalFormWord = porter.NormalForm(word.toString().toLowerCase());
						myDictionary.put(normalFormWord, myDictionary.get(normalFormWord) + 1);
					}
						
					else{
						//String normalFormWord = porter.NormalForm(word.toString().toLowerCase());
						myDictionary.put(normalFormWord, 1);
					}						
				}
				
				word.replace(0, word.length(), "");
			}
		}
	}
	
	public List<File> GetAllFilesFromDirectory(String path, String arg1, String arg2){
		List<File> files = new ArrayList<File>();
		List<File> directoryFiles = new ArrayList<File>();
		File[] tempDirectoryFiles = new File(path).listFiles();
		for(File item : tempDirectoryFiles){
			directoryFiles.add(item);
		}
		
		for(int i=0; i< directoryFiles.size();i++){
			if(directoryFiles.get(i).isFile() 
					&& (directoryFiles.get(i).getName().endsWith(arg1) || directoryFiles.get(i).getName().endsWith(arg2))){
				if(files.contains(directoryFiles.get(i)))
					continue;
				files.add(directoryFiles.get(i));
			}
			else{
				if(directoryFiles.get(i).isDirectory()){
					directoryFiles.addAll(GetAllFilesFromDirectory(directoryFiles.get(i).getPath(), arg1, arg2));
				}
			}
		}
		
		return files;
	}
	
	public void WriteIndexer(File input){
		try{
			ObjectMapper mapper = new ObjectMapper();
			mapper.writerWithDefaultPrettyPrinter().writeValue(new File("directIndex/" + input.getName() + ".json"), myDictionary);			
		} catch (IOException e) {
		   e.printStackTrace();
		}
	}
	
	public void InvertedIndex(List<File> fileList){
		Map<String, Integer> tempMap = new HashMap<String, Integer>();		
		
		for (File file : fileList) {
			
			tempMap = MapIndexFile(file);
			
			for(Map.Entry<String, Integer> entry : tempMap.entrySet()){
				
				List<MapHelper> lmh = new ArrayList<MapHelper>();
				MapHelper mh = new MapHelper(file, entry.getValue());
				
				if(myInvertedIndexMap.containsKey(entry.getKey())){
					lmh = myInvertedIndexMap.get(entry.getKey());
				}
				
				lmh.add(mh);
				myInvertedIndexMap.put(entry.getKey(), lmh);				
			}
			
		}
		
		try{
			ObjectMapper mapper = new ObjectMapper();
			mapper.writerWithDefaultPrettyPrinter().writeValue(new File("invertedIndex.json"), myInvertedIndexMap);
		} catch (IOException e) {
		   e.printStackTrace();
		}
	}
	
	public Map<String, Integer> MapIndexFile(File file){
		Map<String, Integer> indexMap = new HashMap<String, Integer>();
		ObjectMapper mapper = new ObjectMapper();	
		
		try{
			indexMap = mapper.readValue(file, new TypeReference<HashMap<String, Integer>>() {});
		}
		catch(IOException e){
			e.printStackTrace();
		}
		
		return indexMap;
	}
}
